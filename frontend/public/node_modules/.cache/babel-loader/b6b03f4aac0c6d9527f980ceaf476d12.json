{"ast":null,"code":"var _jsxFileName = \"/home/priyanshi/Desktop/sem4/DASS/project1/client/src/components/Support/Chat.jsx\";\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n\n// const Chat = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [input, setInput] = useState('');\n\n//     useEffect(() => {\n//         // Start a new session when the component mounts\n//         setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n//     }, []);\n\n//     const handleInputChange = (e) => {\n//         setInput(e.target.value);\n//     };\n\n//     // const handleSend = async () => {\n//     //     if (input.trim() === '') return;\n\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n//     //     } catch (error) {\n//     //         console.error('Error sending message:', error);\n//     //     }\n//     // };\n//     // const handleSend = async () => {\n\n//     //     if (input.trim() === '') return;\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n//     //     console.log('Messages before API call:', messages);\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         console.log('API response:', response.data);\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n//     //     } catch (error) {\n\n//     //         console.error('Error sending message:', error);\n\n//     //     }\n\n//     // };\n//     const handleSend = async () => {\n//         if (input.trim() === '') return;\n\n//         const newMessage = { sender: 'user', text: input };\n//         setMessages((prevMessages) => [...prevMessages, newMessage]); // Update state with the new user message\n//         setInput('');\n\n//         try {\n//             const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//                 message: input,\n//                 conversation: [...messages, newMessage], // Include the new message in the conversation\n//             });\n\n//             const botMessage = { sender: 'bot', text: response.data.reply };\n//             setMessages((prevMessages) => [...prevMessages, botMessage]); // Update state with the bot's response\n\n//         } catch (error) {\n//             console.error('Error sending message:', error);\n//         }\n//     };\n\n//     return (\n//         <div className={styles.chat_container}>\n//             <div className={styles.chat_window}>\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className={msg.sender === 'bot' ? styles.bot_message : styles.user_message}>\n//                         {msg.text}\n//                     </div>\n//                 ))}\n//             </div>\n//             <div className={styles.input_container}>\n//                 <input\n//                     type=\"text\"\n//                     value={input}\n//                     onChange={handleInputChange}\n//                     placeholder=\"Type your message...\"\n//                     className={styles.input}\n//                 />\n//                 <button onClick={handleSend} className={styles.send_button}>\n//                     Send\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setMessages([{\n      sender: 'bot',\n      text: 'Hello! How can I assist you today?'\n    }]);\n  }, []);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n    const newMessage = {\n      sender: 'user',\n      text: input\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setInput('');\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n        message: input,\n        conversation: messages\n      });\n\n      // Debug log to check response structure\n      console.log('API Response:', response.data);\n\n      // Add error checking for response structure\n      if (!response.data || !response.data.reply) {\n        throw new Error('Invalid response format from API');\n      }\n      const botMessage = {\n        sender: 'bot',\n        text: response.data.reply\n      };\n      setMessages(prevMessages => [...prevMessages, response.data.reply]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message. Please try again.');\n      // Optionally show error in UI\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Sorry, I encountered an error. Please try again.'\n      }]);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w-full max-w-2xl mx-auto p-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bg-gray-100 rounded-lg p-4 h-96 overflow-y-auto mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: `mb-2 p-2 rounded-lg ${msg.sender === 'bot' ? 'bg-blue-100 mr-auto' : 'bg-green-100 ml-auto'} max-w-[80%]`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, msg.text)), error && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-red-500 text-sm mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 11\n    }\n  }, error)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex gap-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: input,\n    onChange: handleInputChange,\n    onKeyPress: e => e.key === 'Enter' && handleSend(),\n    placeholder: \"Type your message...\",\n    className: \"flex-1 p-2 border rounded\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSend,\n    className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, \"Send\")));\n};\nexport default Chat;","map":{"version":3,"names":["React","useState","useEffect","axios","Chat","messages","setMessages","input","setInput","error","setError","sender","text","handleInputChange","e","target","value","handleSend","trim","newMessage","prevMessages","response","post","process","env","REACT_APP_API_URL","message","conversation","console","log","data","reply","Error","botMessage","createElement","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","key","type","onChange","onKeyPress","placeholder","onClick"],"sources":["/home/priyanshi/Desktop/sem4/DASS/project1/client/src/components/Support/Chat.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n\n// const Chat = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [input, setInput] = useState('');\n\n//     useEffect(() => {\n//         // Start a new session when the component mounts\n//         setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n//     }, []);\n\n//     const handleInputChange = (e) => {\n//         setInput(e.target.value);\n//     };\n\n//     // const handleSend = async () => {\n//     //     if (input.trim() === '') return;\n\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n//     //     } catch (error) {\n//     //         console.error('Error sending message:', error);\n//     //     }\n//     // };\n//     // const handleSend = async () => {\n\n//     //     if (input.trim() === '') return;\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n//     //     console.log('Messages before API call:', messages);\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         console.log('API response:', response.data);\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n//     //     } catch (error) {\n\n//     //         console.error('Error sending message:', error);\n\n//     //     }\n\n//     // };\n//     const handleSend = async () => {\n//         if (input.trim() === '') return;\n    \n//         const newMessage = { sender: 'user', text: input };\n//         setMessages((prevMessages) => [...prevMessages, newMessage]); // Update state with the new user message\n//         setInput('');\n    \n//         try {\n//             const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//                 message: input,\n//                 conversation: [...messages, newMessage], // Include the new message in the conversation\n//             });\n    \n//             const botMessage = { sender: 'bot', text: response.data.reply };\n//             setMessages((prevMessages) => [...prevMessages, botMessage]); // Update state with the bot's response\n    \n//         } catch (error) {\n//             console.error('Error sending message:', error);\n//         }\n//     };\n\n//     return (\n//         <div className={styles.chat_container}>\n//             <div className={styles.chat_window}>\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className={msg.sender === 'bot' ? styles.bot_message : styles.user_message}>\n//                         {msg.text}\n//                     </div>\n//                 ))}\n//             </div>\n//             <div className={styles.input_container}>\n//                 <input\n//                     type=\"text\"\n//                     value={input}\n//                     onChange={handleInputChange}\n//                     placeholder=\"Type your message...\"\n//                     className={styles.input}\n//                 />\n//                 <button onClick={handleSend} className={styles.send_button}>\n//                     Send\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n  }, []);\n\n  const handleInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n    \n    const newMessage = { sender: 'user', text: input };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setInput('');\n\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n        message: input,\n        conversation: messages,\n      });\n      \n      // Debug log to check response structure\n      console.log('API Response:', response.data);\n      \n      // Add error checking for response structure\n      if (!response.data || !response.data.reply) {\n        throw new Error('Invalid response format from API');\n      }\n\n      const botMessage = { sender: 'bot', text: response.data.reply };\n      setMessages(prevMessages => [...prevMessages, response.data.reply]);\n\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setError('Failed to send message. Please try again.');\n      // Optionally show error in UI\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'bot',\n        text: 'Sorry, I encountered an error. Please try again.'\n      }]);\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto p-4\">\n      <div className=\"bg-gray-100 rounded-lg p-4 h-96 overflow-y-auto mb-4\">\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            className={`mb-2 p-2 rounded-lg ${\n              msg.sender === 'bot' \n                ? 'bg-blue-100 mr-auto' \n                : 'bg-green-100 ml-auto'\n            } max-w-[80%]`}\n          >\n            {msg.text}\n          </div>\n        ))}\n        {error && (\n          <div className=\"text-red-500 text-sm mt-2\">{error}</div>\n        )}\n      </div>\n      <div className=\"flex gap-2\">\n        <input\n          type=\"text\"\n          value={input}\n          onChange={handleInputChange}\n          onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n          placeholder=\"Type your message...\"\n          className=\"flex-1 p-2 border rounded\"\n        />\n        <button\n          onClick={handleSend}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n        >\n          Send\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}