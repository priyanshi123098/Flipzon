{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n\n// const Chat = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [input, setInput] = useState('');\n\n//     useEffect(() => {\n//         // Start a new session when the component mounts\n//         setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n//     }, []);\n\n//     const handleInputChange = (e) => {\n//         setInput(e.target.value);\n//     };\n\n//     // const handleSend = async () => {\n//     //     if (input.trim() === '') return;\n\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n//     //     } catch (error) {\n//     //         console.error('Error sending message:', error);\n//     //     }\n//     // };\n//     // const handleSend = async () => {\n\n//     //     if (input.trim() === '') return;\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n//     //     console.log('Messages before API call:', messages);\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         console.log('API response:', response.data);\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n//     //     } catch (error) {\n\n//     //         console.error('Error sending message:', error);\n\n//     //     }\n\n//     // };\n//     const handleSend = async () => {\n//         if (input.trim() === '') return;\n\n//         const newMessage = { sender: 'user', text: input };\n//         setMessages((prevMessages) => [...prevMessages, newMessage]); // Update state with the new user message\n//         setInput('');\n\n//         try {\n//             const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//                 message: input,\n//                 conversation: [...messages, newMessage], // Include the new message in the conversation\n//             });\n\n//             const botMessage = { sender: 'bot', text: response.data.reply };\n//             setMessages((prevMessages) => [...prevMessages, botMessage]); // Update state with the bot's response\n\n//         } catch (error) {\n//             console.error('Error sending message:', error);\n//         }\n//     };\n\n//     return (\n//         <div className={styles.chat_container}>\n//             <div className={styles.chat_window}>\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className={msg.sender === 'bot' ? styles.bot_message : styles.user_message}>\n//                         {msg.text}\n//                     </div>\n//                 ))}\n//             </div>\n//             <div className={styles.input_container}>\n//                 <input\n//                     type=\"text\"\n//                     value={input}\n//                     onChange={handleInputChange}\n//                     placeholder=\"Type your message...\"\n//                     className={styles.input}\n//                 />\n//                 <button onClick={handleSend} className={styles.send_button}>\n//                     Send\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n\n// const Chat = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n//   }, []);\n\n//   const handleInputChange = (e) => {\n//     setInput(e.target.value);\n//   };\n\n//   const handleSend = async () => {\n//     if (input.trim() === '') return;\n\n//     const newMessage = { sender: 'user', text: input };\n//     setMessages(prevMessages => [...prevMessages, newMessage]);\n//     setInput('');\n\n//     try {\n//       const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//         message: input,\n//         conversation: messages,\n//       });\n\n//       // Debug log to check response structure\n//       console.log('API Response:', response.data);\n\n//       // Add error checking for response structure\n//       if (!response.data || !response.data.reply) {\n//         throw new Error('Invalid response format from API');\n//       }\n\n//       const botMessage = { sender: 'bot', text: response.data.reply };\n//       setMessages(prevMessages => [...prevMessages, response.data.reply]);\n\n//     } catch (error) {\n//       console.error('Error sending message:', error);\n//       setError('Failed to send message. Please try again.');\n//       // Optionally show error in UI\n//       setMessages(prevMessages => [...prevMessages, {\n//         sender: 'bot',\n//         text: 'Sorry, I encountered an error. Please try again.'\n//       }]);\n//     }\n//   };\n\n//   return (\n//     <div className=\"w-full max-w-2xl mx-auto p-4\">\n//       <div className=\"bg-gray-100 rounded-lg p-4 h-96 overflow-y-auto mb-4\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`mb-2 p-2 rounded-lg ${\n//               msg.sender === 'bot' \n//                 ? 'bg-blue-100 mr-auto' \n//                 : 'bg-green-100 ml-auto'\n//             } max-w-[80%]`}\n//           >\n//             {msg.text}\n//           </div>\n//         ))}\n//         {error && (\n//           <div className=\"text-red-500 text-sm mt-2\">{error}</div>\n//         )}\n//       </div>\n//       <div className=\"flex gap-2\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={handleInputChange}\n//           onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n//           placeholder=\"Type your message...\"\n//           className=\"flex-1 p-2 border rounded\"\n//         />\n//         <button\n//           onClick={handleSend}\n//           className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n//         >\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;","map":{"version":3,"names":[],"sources":["/home/priyanshi/Desktop/sem4/DASS/project1/client/src/components/Support/Chat.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n\n// const Chat = () => {\n//     const [messages, setMessages] = useState([]);\n//     const [input, setInput] = useState('');\n\n//     useEffect(() => {\n//         // Start a new session when the component mounts\n//         setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n//     }, []);\n\n//     const handleInputChange = (e) => {\n//         setInput(e.target.value);\n//     };\n\n//     // const handleSend = async () => {\n//     //     if (input.trim() === '') return;\n\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n//     //     } catch (error) {\n//     //         console.error('Error sending message:', error);\n//     //     }\n//     // };\n//     // const handleSend = async () => {\n\n//     //     if (input.trim() === '') return;\n//     //     const newMessage = { sender: 'user', text: input };\n//     //     setMessages([...messages, newMessage]);\n//     //     setInput('');\n//     //     console.log('Messages before API call:', messages);\n//     //     try {\n//     //         const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//     //             message: input,\n//     //             conversation: messages,\n//     //         });\n//     //         console.log('API response:', response.data);\n//     //         const botMessage = { sender: 'bot', text: response.data.reply };\n//     //         setMessages((prevMessages) => [...prevMessages, botMessage]);\n\n//     //     } catch (error) {\n\n//     //         console.error('Error sending message:', error);\n\n//     //     }\n\n//     // };\n//     const handleSend = async () => {\n//         if (input.trim() === '') return;\n    \n//         const newMessage = { sender: 'user', text: input };\n//         setMessages((prevMessages) => [...prevMessages, newMessage]); // Update state with the new user message\n//         setInput('');\n    \n//         try {\n//             const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//                 message: input,\n//                 conversation: [...messages, newMessage], // Include the new message in the conversation\n//             });\n    \n//             const botMessage = { sender: 'bot', text: response.data.reply };\n//             setMessages((prevMessages) => [...prevMessages, botMessage]); // Update state with the bot's response\n    \n//         } catch (error) {\n//             console.error('Error sending message:', error);\n//         }\n//     };\n\n//     return (\n//         <div className={styles.chat_container}>\n//             <div className={styles.chat_window}>\n//                 {messages.map((msg, index) => (\n//                     <div key={index} className={msg.sender === 'bot' ? styles.bot_message : styles.user_message}>\n//                         {msg.text}\n//                     </div>\n//                 ))}\n//             </div>\n//             <div className={styles.input_container}>\n//                 <input\n//                     type=\"text\"\n//                     value={input}\n//                     onChange={handleInputChange}\n//                     placeholder=\"Type your message...\"\n//                     className={styles.input}\n//                 />\n//                 <button onClick={handleSend} className={styles.send_button}>\n//                     Send\n//                 </button>\n//             </div>\n//         </div>\n//     );\n// };\n\n// export default Chat;\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n// import styles from './styles.module.css';\n\n\n// const Chat = () => {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n//   }, []);\n\n//   const handleInputChange = (e) => {\n//     setInput(e.target.value);\n//   };\n\n//   const handleSend = async () => {\n//     if (input.trim() === '') return;\n    \n//     const newMessage = { sender: 'user', text: input };\n//     setMessages(prevMessages => [...prevMessages, newMessage]);\n//     setInput('');\n\n//     try {\n//       const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n//         message: input,\n//         conversation: messages,\n//       });\n      \n//       // Debug log to check response structure\n//       console.log('API Response:', response.data);\n      \n//       // Add error checking for response structure\n//       if (!response.data || !response.data.reply) {\n//         throw new Error('Invalid response format from API');\n//       }\n\n//       const botMessage = { sender: 'bot', text: response.data.reply };\n//       setMessages(prevMessages => [...prevMessages, response.data.reply]);\n\n//     } catch (error) {\n//       console.error('Error sending message:', error);\n//       setError('Failed to send message. Please try again.');\n//       // Optionally show error in UI\n//       setMessages(prevMessages => [...prevMessages, {\n//         sender: 'bot',\n//         text: 'Sorry, I encountered an error. Please try again.'\n//       }]);\n//     }\n//   };\n\n//   return (\n//     <div className=\"w-full max-w-2xl mx-auto p-4\">\n//       <div className=\"bg-gray-100 rounded-lg p-4 h-96 overflow-y-auto mb-4\">\n//         {messages.map((msg, index) => (\n//           <div\n//             key={index}\n//             className={`mb-2 p-2 rounded-lg ${\n//               msg.sender === 'bot' \n//                 ? 'bg-blue-100 mr-auto' \n//                 : 'bg-green-100 ml-auto'\n//             } max-w-[80%]`}\n//           >\n//             {msg.text}\n//           </div>\n//         ))}\n//         {error && (\n//           <div className=\"text-red-500 text-sm mt-2\">{error}</div>\n//         )}\n//       </div>\n//       <div className=\"flex gap-2\">\n//         <input\n//           type=\"text\"\n//           value={input}\n//           onChange={handleInputChange}\n//           onKeyPress={(e) => e.key === 'Enter' && handleSend()}\n//           placeholder=\"Type your message...\"\n//           className=\"flex-1 p-2 border rounded\"\n//         />\n//         <button\n//           onClick={handleSend}\n//           className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n//         >\n//           Send\n//         </button>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Chat;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}