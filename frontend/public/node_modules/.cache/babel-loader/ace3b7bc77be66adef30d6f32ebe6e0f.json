{"ast":null,"code":"var _jsxFileName = \"/home/priyanshi/Desktop/sem4/DASS/project1/client/src/components/Support/Chat.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport styles from './styles.module.css';\nconst Chat = () => {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  useEffect(() => {\n    // Start a new session when the component mounts\n    setMessages([{\n      sender: 'bot',\n      text: 'Hello! How can I assist you today?'\n    }]);\n  }, []);\n  const handleInputChange = e => {\n    setInput(e.target.value);\n  };\n  const handleSend = async () => {\n    if (input.trim() === '') return;\n    const newMessage = {\n      sender: 'user',\n      text: input\n    };\n    setMessages([...messages, newMessage]);\n    setInput('');\n    console.log('Messages before API call:', messages);\n    try {\n      const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n        message: input,\n        conversation: messages\n      });\n      console.log('API response:', response.data);\n      const botResponseText = response.data.response; // Access the response property\n\n      // Check if the response text is valid\n      if (!botResponseText) {\n        throw new Error('Invalid response format from API');\n      }\n\n      // Create a new message object for the bot's response\n      const botMessage = {\n        sender: 'bot',\n        text: botResponseText\n      };\n      setMessages(prevMessages => [...prevMessages, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.chat_container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.chat_window,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, messages.map((msg, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    className: msg.sender === 'bot' ? styles.bot_message : styles.user_message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 21\n    }\n  }, msg.text))), /*#__PURE__*/React.createElement(\"div\", {\n    className: styles.input_container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    value: input,\n    onChange: handleInputChange,\n    placeholder: \"Type your message...\",\n    className: styles.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleSend,\n    className: styles.send_button,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, \"Send\")));\n};\nexport default Chat;","map":{"version":3,"names":["React","useState","useEffect","axios","styles","Chat","messages","setMessages","input","setInput","sender","text","handleInputChange","e","target","value","handleSend","trim","newMessage","console","log","response","post","process","env","REACT_APP_API_URL","message","conversation","data","botResponseText","Error","botMessage","prevMessages","error","createElement","className","chat_container","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","chat_window","map","msg","index","key","bot_message","user_message","input_container","type","onChange","placeholder","onClick","send_button"],"sources":["/home/priyanshi/Desktop/sem4/DASS/project1/client/src/components/Support/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport styles from './styles.module.css';\n\nconst Chat = () => {\n    const [messages, setMessages] = useState([]);\n    const [input, setInput] = useState('');\n\n    useEffect(() => {\n        // Start a new session when the component mounts\n        setMessages([{ sender: 'bot', text: 'Hello! How can I assist you today?' }]);\n    }, []);\n\n    const handleInputChange = (e) => {\n        setInput(e.target.value);\n    };\n\n    const handleSend = async () => {\n\n        if (input.trim() === '') return;\n        const newMessage = { sender: 'user', text: input };\n        setMessages([...messages, newMessage]);\n        setInput('');\n        console.log('Messages before API call:', messages);\n        try {\n            const response = await axios.post(`${process.env.REACT_APP_API_URL}/api/chat`, {\n                message: input,\n                conversation: messages,\n            });\n            console.log('API response:', response.data);\n            const botResponseText = response.data.response; // Access the response property\n\n        // Check if the response text is valid\n        if (!botResponseText) {\n            throw new Error('Invalid response format from API');\n        }\n\n        // Create a new message object for the bot's response\n        const botMessage = { sender: 'bot', text: botResponseText };\n        setMessages(prevMessages => [...prevMessages, botMessage]); \n\n        } catch (error) {\n\n            console.error('Error sending message:', error);\n\n        }\n\n    };\n\n    return (\n        <div className={styles.chat_container}>\n            <div className={styles.chat_window}>\n                {messages.map((msg, index) => (\n                    <div key={index} className={msg.sender === 'bot' ? styles.bot_message : styles.user_message}>\n                        {msg.text}\n                    </div>\n                ))}\n            </div>\n            <div className={styles.input_container}>\n                <input\n                    type=\"text\"\n                    value={input}\n                    onChange={handleInputChange}\n                    placeholder=\"Type your message...\"\n                    className={styles.input}\n                />\n                <button onClick={handleSend} className={styles.send_button}>\n                    Send\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}